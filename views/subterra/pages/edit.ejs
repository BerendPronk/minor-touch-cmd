<!DOCTYPE html>
<html lang="nl">
	<head>
		<meta charset="UTF-8">

		<title>Edit a page</title>

    <%- include ../partials/head -%>

    <%- include ../partials/header -%>

		<% if (feedback) { %>
      <div id="feedback" class="<%= feedbackState %>">
        <%= feedback %>
      </div>
    <% } %>

    <h1>Edit <%= page.title %></h1>

    <form action="/subterra/pages/edit/<%= page.id %>" method="post">
      <fieldset>
        <legend>Type</legend>

        <select name="type">
          <% for (let i = 0; i < system.types.length; i++) { %>
            // Set current page type to selected
            <option value="<%= system.types[i] %>" <%= system.types[i] === page.type ? 'selected' : '' %>>
              <%= system.types[i] %>
            </option>
          <% } %>
        </select>

      </fieldset>
      <fieldset>
        <legend>Title</legend>
        <input type="text" name="title" value="<%= page.title %>">
      </fieldset>
      <fieldset>
        <legend>Menus</legend>

        <ul id="pageParents">
          <% for (let i = 0; i < page.parents.length; i++) { %>
            <li>
              <span data-type="parent-title"><%= page.parents[i] %></span>
              <span data-type="parent-delete">X</span>
            </li>
          <% } %>
        </ul>

        <input hidden="text" name="parents">

        <select id="pageParentSelect">
          <option value="" disabled selected>Add another parent</option>
          <% for (let i = 0; i < system.menus.length; i++) { %>
            <option value="<%= system.menus[i] %>">
              <%= system.menus[i] %>
            </option>
          <% } %>
        </select>

      </fieldset>
      <fieldset>
        <legend>Content</legend>

				<ul id="pageContent">
					<% for (let i = 0; i < page.content.length; i++) { %>
						<li data-order="content-<%= i %>">
							<%- page.content[i] %>
						</li>
					<% } %>
				</ul>

      </fieldset>

			<fieldset>

				<button id="moduleButton">Add Module</button>
				<select id="moduleSelect" style="display:none;">
					<option value="" disabled selected>Choose a module</option>
					<% for (let i = 0; i < system.modules.length; i++) { %>
						<option value="<%= system.modules[i] %>">
							<%= system.modules[i] %>
						</option>
					<% } %>
				</ul>

			</fieldset>

      <input style="display:block" type="submit" value="Submit">
    </form>


    <%# %>


    <script>
      const pageForm = document.querySelector('form');
      let formSubmit = false;

			///////////////////////////////////////////////////////
			// MOVE TO MENU EDIT VIEW
			///////////////////////////////////////////////////////
      const inputMenu = document.querySelector('input[name="parents"]');
      const parentSelect = document.querySelector('#pageParentSelect');
      const pageParentList = document.querySelector('#pageParents');
      const pageParents = pageParentList.querySelectorAll('li');
      let parentDeleteButtons = pageParentList.querySelectorAll('[data-type="parent-delete"]');
      let parentArr = [];

      // Apply parent pages to input, joined with a single comma
      pageParents.forEach(parent => {
        parentArr.push(parent.querySelector('[data-type="parent-title"]').textContent);
      });
      inputMenu.value = parentArr.join(',').replace(', ', ',');

      // Add new parent to page's parents
      parentSelect.addEventListener('change', () => {
        // Check if parent is already added
        if (parentArr.indexOf(parentSelect.value) === -1) {
          const newParent = document.createElement('li');

          newParent.insertAdjacentHTML(
            'afterbegin',
            `<span data-type="parent-title">${ parentSelect.value }</span>
             <span data-type="parent-delete">X</span>`
          );

          // Add event listener to newly added parent's delete-button
          newParent.querySelector('[data-type="parent-delete"]').addEventListener('click', removeParent);

          // Append new parent to parent list
          pageParentList.appendChild(newParent);

          // Add newly added parent to input
          parentArr.push(parentSelect.value);
          inputMenu.value = parentArr.join(',').replace(', ', ',');
        }

        // Reset index of parent selection
        parentSelect.selectedIndex = 0;
      });

      // Add event listener to all delete buttons
      parentDeleteButtons.forEach(button => {
        button.addEventListener('click', removeParent);
      })

      // Remove a parent from the parent list
      function removeParent(event) {
        const slug = event.target.parentNode.querySelector('[data-type="parent-title"]').textContent;
        const slugIndex = parentArr.indexOf(slug);

        // Remove slug from parent array
        parentArr.splice(slugIndex, 1);

        // Remove slug from parent list
        pageParentList.removeChild(pageParentList.children[slugIndex]);

        // Remove slug from hidden input
        inputMenu.value = parentArr.join(',').replace(', ', ',');
      }
			///////////////////////////////////////////////////////

			const pageContent = document.querySelector('#pageContent');
			const moduleButton = document.querySelector('#moduleButton');
			const moduleSelect = document.querySelector('#moduleSelect');

			// Replace with CSS
			moduleButton.addEventListener('click', event => {
				moduleSelect.style.display = 'block';

				event.preventDefault();
			});

			moduleSelect.addEventListener('input', () => {
				moduleSelect.style.display = 'none';
				const index = pageContent.children.length;
				let newModule;

				switch (moduleSelect.value) {
					case 'heading':
						newModule = `
						<li>
							<input name="content-h-${ index }" type="text">
						</li>`;
					break;
					case 'paragraph':
						newModule = `
						<li>
							<textarea name="content-p-${ index }"></textarea>;
						</li>`;
					break;
					case 'image':
						newModule = `
						<li>
							<input name="content-i-${ index }" type="file">
						</li>`;
					break;
					case 'list':
						newModule = `
						<li>
							<input name="content-l-name-${ index }" type="text">
							<input name="content-l-${ index }" type="hidden">
							<ul data-list="${ index }">
								<li>
									<input name="content-l-${ index }-1" type="text">
								</li>
							</ul>
							<button data-type="addToList-${ index }">Add item</button>
						</li>`;
					break;
					case 'embed':
						newModule = `
						<li>

						</li>`;
					break;
				}

				// Insert module at the end of the content list
				pageContent.insertAdjacentHTML(
					'beforeend',
					newModule
				);
			});

      // Set formSubmit to active
      pageForm.addEventListener('submit', () => {
        formSubmit = true;
      });

      // Alert user before page unload to prevent data loss
      // window.onbeforeunload = () => {
      //   if (!formSubmit) {
      //     return 'You may have some unsaved changes, do you really want to leave this page?';
      //   } else {
      //     return;
      //   }
      // };
    </script>

    <%- include ../partials/footer -%>
