<!DOCTYPE html>
<html lang="nl">
	<head>
		<meta charset="UTF-8">

		<title>Add a page</title>

    <%- include ../partials/head -%>

    <%- include ../partials/header -%>

		<% if (feedback) { %>
      <div id="feedback" class="<%= feedbackState %>">
        <%= feedback %>
      </div>
    <% } %>

    <h1>Add a new page</h1>

		<form action="/subterra/pages/add" method="post">
      <fieldset>
        <legend>Type</legend>

        <select name="type">
          <% for (let i = 0; i < system.types.length; i++) { %>
            // Set current page type to selected
            <option value="<%= system.types[i] %>" <%= system.types[i] === page.type ? 'selected' : '' %>>
              <%= system.types[i] %>
            </option>
          <% } %>
        </select>

      </fieldset>
      <fieldset>
        <legend>Title</legend>

        <input type="text" name="title">
				
      </fieldset>
      <fieldset>
        <legend>Menus</legend>

				<%# Menus for loop %>

      </fieldset>
      <fieldset>
        <legend>Content</legend>

				<ul id="pageContent">
					<% for (let i = 0; i < page.content.length; i++) { %>
						<li data-order="content-<%= i %>">
							<%- page.content[i] %>
							<ul>
								<li><span data-action="move-up">up</span></li>
								<li><span data-action="move-down">down</span></li>
								<li><span data-action="delete">delete</span></li>
							</ul>
						</li>
					<% } %>
				</ul>

      </fieldset>

			<fieldset>

				<button id="moduleButton">Add Module</button>
				<select id="moduleSelect" style="display:none;">
					<option value="" disabled selected>Choose a module</option>
					<% for (let i = 0; i < system.modules.length; i++) { %>
						<option value="<%= system.modules[i] %>">
							<%= system.modules[i] %>
						</option>
					<% } %>
				</ul>

			</fieldset>

      <input style="display:block" type="submit" value="Submit">
    </form>


		<%# %>


		<script>
			const pageForm = document.querySelector('form');
			let formSubmit = false;

			const pageContent = document.querySelector('#pageContent');
			const moduleButton = document.querySelector('#moduleButton');
			const moduleSelect = document.querySelector('#moduleSelect');

			// Replace with CSS
			moduleButton.addEventListener('click', event => {
				moduleSelect.style.display = 'block';

				event.preventDefault();
			});

			moduleSelect.addEventListener('input', () => {
				const index = pageContent.children.length;
				let newModule;

				switch (event.target.value) {
					case 'heading':
						newModule = `
							<span class="content-tip">Heading</span>
							<input name="content-h-${ index }" type="text">
						`;
					break;
					case 'paragraph':
						newModule = `
							<span class="content-tip">Paragraph</span>
							<textarea name="content-p-${ index }"></textarea>
						`;
					break;
					case 'image':
						newModule = `
							<span class="content-tip">Image</span>
							<input name="content-i-${ index }" type="file">
						`;
					break;
					case 'list':
						newModule = `
							<span class="content-tip">List name</span>
							<input name="content-l-name-${ index }" type="text" oninput="addListName()">
							<span class="content-tip">List items</span>
							<input name="content-l-list-${ index }" type="hidden">
							<ul>
								<li>
									<input type="text" oninput="addListItem()">
								</li>
							</ul>
							<button data-type="addToList" onclick="addListInput()">Add item</button>
						`;
					break;
					case 'embed':
						newModule = `
							<span class="content-tip">Embedded video (YouTube or Vimeo)</span>
							<input name="content-e-${ index }" type="text">
						`;
					break;
				}

				// Insert module at the end of the content list
				pageContent.insertAdjacentHTML(
					'beforeend',
					`<li data-order="content-${ index }">
						${ newModule }
						<ul>
							<li><span data-action="move-up">up</span></li>
							<li><span data-action="move-down">down</span></li>
							<li><span data-action="delete">delete</span></li>
						</ul>
					</li>`
				);

				// Reset module selector
				moduleSelect.style.display = 'none';
				moduleSelect.selectedIndex = 0;
			});

			function addListInput() {
				const list = event.target.parentElement.querySelector('ul');
				const listIndex = list.children.length;

				list.insertAdjacentHTML(
					'beforeend',
					`<li>
						<input type="text" oninput="addListItem()">
					</li>`
				)

				event.preventDefault();
			}

			function addListName() {
				const field = event.target.parentNode;
				const listInput = field.querySelector('input[name^="content-l-list"]');
				const nameValue = event.target.value;
				const list = field.querySelector('ul');
				const listItems = list.querySelectorAll('li');
				let listItemValues = [];

				listItems.forEach(item => {
					const value = item.querySelector('input').value;

					listItemValues.push(value);
				});

				listInput.value = `${ nameValue }|${ listItemValues.join(',') }`;
			}

			function addListItem() {
				const field = event.target.parentNode.parentNode.parentNode;
				const listInput = field.querySelector('input[name^="content-l-list"]');
				const nameValue = field.querySelector('input[name^="content-l-name"]').value;
				const list = field.querySelector('ul');
				const listItems = list.querySelectorAll('li');
				let listItemValues = [];

				listItems.forEach(item => {
					const value = item.querySelector('input').value;

					listItemValues.push(value);
				});

				listInput.value = `${ nameValue }|${ listItemValues.join(',') }`;
			}

			// Set formSubmit to active
			pageForm.addEventListener('submit', () => {
				formSubmit = true;
			});

			// Alert user before page unload to prevent data loss
			// window.onbeforeunload = () => {
			//   if (!formSubmit) {
			//     return 'You may have some unsaved changes, do you really want to leave this page?';
			//   } else {
			//     return;
			//   }
			// };
		</script>

    <%- include ../partials/footer -%>
